
# Adobe India Hackathon 2025 – Round 1A Challenge Requirements

## 🎯 Objective
Extract a structured document outline from a given PDF file.

## 📄 Input
- One or more PDF files (≤ 50 pages each)
- Located inside the `input/` folder
- Text may be in English or other languages (e.g., Hindi, Japanese)

## 📤 Expected Output
For each input PDF, generate a JSON file with the following schema:

{
  "title": "Title of the Document",
  "outline": [
    {
      "level": "H1" | "H2" | "H3",
      "text": "Heading text",
      "page": <page_number as integer>
    },
    ...
  ]
}

- Output filename must match input PDF name (e.g., `file.pdf → file.json`)
- Output should be saved to the `output/` folder

## 🧠 Requirements

| Constraint            | Requirement                                   |
|-----------------------|-----------------------------------------------|
| ⏱ Execution Time      | ≤ 10 seconds for a 50-page PDF                |
| 💾 Model Size          | ≤ 200 MB (total ML model files on disk)       |
| 🧠 Model Type          | CPU-only inference (no GPU acceleration)      |
| 📶 Internet Access     | ❌ Disabled at runtime                         |
| 🐳 Deployment          | Must run inside a Docker container            |
| 📄 Architecture        | x86_64 (Linux/AMD64 platform compatible)      |
| 🧪 Output Validation   | Must pass schema validation (`output_schema.json`) |
| 🧹 Clean Design        | No modification of input folder or filenames  |
| 📚 Multilingual Support| Recommended (extra points for non-English)    |
| 🤖 AI Optional         | You may use rule-based, ML, or hybrid approach|

## ✅ Evaluation Criteria
- Output JSON correctness and structure
- Accuracy of heading detection and hierarchy
- Speed and efficiency under constraints
- Code readability and modularity
- Docker compatibility and clean execution

## 📌 Important Notes
- Avoid relying solely on font size heuristics
- Ignore images and purely visual elements
- Headings may span multiple lines or pages
- Clean false positives like footers, bullet points, URLs, etc.

## 🔄 Pipeline Summary
1. Parse PDF and extract structured text blocks
2. Detect and classify headings (H1/H2/H3)
3. Output a valid JSON file per document

```
